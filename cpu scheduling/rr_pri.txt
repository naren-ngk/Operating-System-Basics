#include <stdio.h>

// Structure to store process details
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
} Process;

int main() {
    int num_processes, time_quantum, current_time = 0, total_burst_time = 0, i, j, total_waiting_time = 0, total_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    Process processes[num_processes];

    for (i = 0; i < num_processes; i++) {
        printf("\nEnter details for Process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority (1-10): ");
        scanf("%d", &processes[i].priority);

        processes[i].remaining_time = processes[i].burst_time;

        total_burst_time += processes[i].burst_time;
    }

    printf("\nEnter Time Quantum: ");
    scanf("%d", &time_quantum);

    // Sort processes by priority in descending order
    for (i = 0; i < num_processes - 1; i++) {
        for (j = i + 1; j < num_processes; j++) {
            if (processes[i].priority < processes[j].priority) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    printf("\nGantt Chart:\n");

    printf("0");
    for (i = 0; i < total_burst_time; i++) {
        for (j = 0; j < num_processes; j++) {
            if (processes[j].arrival_time <= current_time && processes[j].remaining_time > 0) {
                printf(" - P%d - ", processes[j].process_id);

                if (processes[j].remaining_time <= time_quantum) {
                    current_time += processes[j].remaining_time;
                    total_turnaround_time += current_time - processes[j].arrival_time;
                    total_waiting_time += current_time - processes[j].arrival_time - processes[j].burst_time;
                    processes[j].remaining_time = 0;
                } else {
                    current_time += time_quantum;
                    processes[j].remaining_time -= time_quantum;
                }
            }
        }
        printf("%d", current_time);
    }

    printf("\n\nAverage Waiting Time: %.2f", (float) total_waiting_time / num_processes);
    printf("\nAverage Turnaround Time: %.2f", (float) total_turnaround_time / num_processes);

    return 0;
}