#include <stdio.h>
#include <limits.h>

struct Process
{
        int pid;             // Process ID
        int burst_time;      // Burst time of the process
        int remaining_time;  // Remaining time of the process
        int waiting_time;    // Waiting time of the process
        int turnaround_time; // Turnaround time of the process
        int priority;        // Priority of the process
};

int main()
{
        int n, i, j, t, total_burst_time = 0, time_quantum, remaining_processes;
        float total_waiting_time = 0, total_turnaround_time = 0, average_waiting_time, average_turnaround_time;

        printf("Enter the number of processes: ");
        scanf("%d", &n);

        struct Process processes[n];

        // Input process details
        for (i = 0; i < n; i++)
        {
                printf("Process [%d]\n", i + 1);
                printf("Burst Time: ");
                scanf("%d", &processes[i].burst_time);
                printf("Priority: ");
                scanf("%d", &processes[i].priority);
                processes[i].remaining_time = processes[i].burst_time;
                processes[i].pid = i + 1;
                total_burst_time += processes[i].burst_time;
        }

        printf("Enter the time quantum: ");
        scanf("%d", &time_quantum);

        // Sort the processes by priority
        for (i = 0; i < n; i++)
        {
                for (j = i + 1; j < n; j++)
                {
                        if (processes[i].remaining_time > processes[j].remaining_time)
                        {
                                struct Process temp = processes[i];
                                processes[i] = processes[j];
                                processes[j] = temp;
                        }
                }
        }

        // Execute processes in round robin fashion
        remaining_processes = n;
        for (t = 0; remaining_processes != 0;)
        {
                for (i = 0; i < n; i++)
                {
                        if (processes[i].remaining_time > 0)
                        {
                                if (processes[i].remaining_time <= time_quantum)
                                {
                                        t += processes[i].remaining_time;
                                        processes[i].remaining_time = 0;
                                        processes[i].waiting_time = t - processes[i].burst_time;
                                        processes[i].turnaround_time = t;
                                        total_waiting_time += processes[i].waiting_time;
                                        total_turnaround_time += processes[i].turnaround_time;
                                        remaining_processes--;
                                }
                                else
                                {
                                        t += time_quantum;
                                        processes[i].remaining_time -= time_quantum;
                                }
                        }
                }
        }

        // Print the process details and average waiting time and turnaround time
        average_waiting_time = total_waiting_time / n;
        average_turnaround_time = total_turnaround_time / n;
        printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\tPriority\n");
        for (i = 0; i < n; i++)
        {
                printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time, processes[i].priority);
        }
        printf("\nAverage Waiting Time: %f", average_waiting_time);
        printf("\nAverage Turnaround Time: %f\n", average_turnaround_time);
        return 0;
}